from .base_classes import YahooStockBase
from dividends_info.models import StockInfo
from django.core.cache import cache
import hashlib

class YahooStock(YahooStockBase):
    TICKER_KEY = None
    object = None

    def __init__(self, ticker: str, years: int=1):
        # Initialize Ticker
        self.TICKER = ticker.upper()
        # Set up variables.
        self.TICKER_KEY = self.generate_key(ticker=self.TICKER,years=self.YEARS)
        self.YEARS = years
    
    def get_stock_from_cache(self):
        cache_key = self.TICKER_KEY
        if cache.get(cache_key, None) is not None:
            self.object = cache.get(self.TICKER_KEY)
            return self.object
        else:
            try:
                obj_to_cache = StockInfo.objects.get(ticker=self.TICKER)
            except StockInfo.DoesNotExist:
                obj_to_cache = self.get_stock_from_yahoo()
            self.object = obj_to_cache
            cache.set(cache_key, obj_to_cache)
            return obj_to_cache

    def set_stock_in_cache(self, stock):
        cache_key = self.TICKER_KEY
        cache.set(cache_key, stock)

    def get_and_set_stock(self):
        data, all_dividends, earnings = self.get_stock_from_yahoo()
        stock = self.create_stock(data, all_dividends, earnings)
        self.set_stock_in_cache(stock)
        return stock

    def create_stock(self, data, all_dividends, earnings):
        stock, created = StockInfo.objects.get_or_create(ticker=self.TICKER)
        stock.ticker = self.TICKER
        stock.current_price = data.get('current_price', 0)
        stock.name = data.get('name', '')
        stock.summary = data.get('summary', '')
        stock.sector = data.get('sector', '')
        stock.dividends = all_dividends
        stock.earnings = earnings
        stock.save()
        return stock

    @staticmethod
    def __hash_key(key: str) -> str:
        hash_object = hashlib.sha256(key.encode('utf-8'))
        return hash_object.hexdigest()

    def generate_key(self, ticker=None, years=None) -> str:
        """
        Generate a key based on the ticker.
        Key is generated by hashing the ticker, and old price. 
        This is to ensure that the key is unique.

        :return: self.TICKER_KEY
        """
        key = str(ticker)
        TICKER_KEY = self.__class__.__name__ + '_' \
            + key + '_' + str(years or self.YEARS)
        self.TICKER_KEY = self.__hash_key(TICKER_KEY)
        return self.TICKER_KEY



